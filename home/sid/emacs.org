#+TITLE: GNU Emacs Configuration
#+AUTHOR: Sid

* Overview
Sid's GNU Emacs configuration. This is a org file to provide my emacs configuraitons.
It can be use standalone, but now mainly used with `nix-community/home-manager`.

Because of this, it dosen't contain anly pakcage manager. If you wan to use it,
you'd better add some package manager configurations in it.

* Early initialization
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Early Initialization -*- lexical-binding: t; -*-
#+end_src

** Startup
Time the startup and display the startup time after completed.
#+begin_src emacs-lisp :tangle early-init.el
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Loaded Emacs in %.03fs"
                     (float-time (time-subtract after-init-time before-init-time)))))
#+end_src

Temporarily reduce garbage collection to gain some performance boost during startup.
#+begin_src emacs-lisp :tangle early-init.el
(let ((normal-gc-cons-threshold gc-cons-threshold)
      (normal-gc-cons-percentage gc-cons-percentage)
      (normal-file-name-handler-alist file-name-handler-alist)
      (init-gc-cons-threshold most-positive-fixnum)
      (init-gc-cons-percentage 0.6))
  (setq gc-cons-threshold init-gc-cons-threshold
        gc-cons-percentage init-gc-cons-percentage
        file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold ,normal-gc-cons-threshold
                     gc-cons-percentage ,normal-gc-cons-percentage
                     file-name-handler-alist ',normal-file-name-handler-alist))))
#+end_src

Inhibit startup screen and messages. If you are new to Emacs it is recommended to not
disable the startup screen as it has great content to get you going.
#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+end_src

Performance tweaks.  Don't load default library and use =fundamental-mode= to reduce amount
of hooks.
#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-default-init t)
(setq initial-major-mode 'fundamental-mode)
#+end_src

Disable =package.el= support. Packages are managed via Nix and disabling this gives a slight
performance boost.
#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src

** UI
Disable GUI components.
#+begin_src emacs-lisp :tangle early-init.el
(setq use-dialog-box nil)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Don't implicitly resize frames when changing various settings.
#+begin_src emacs-lisp :tangle early-init.el
(setq frame-inhibit-implied-resize t)
#+end_src

Ignore X resources.
#+begin_src emacs-lisp :tangle early-init.el
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

* Base settings
#+begin_src emacs-lisp :tangle yes
;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+end_src

** Variables
Provide an easy way to toggle debug mode which will set certain variables to produce more informative output.
It can be set either by providing the environment variable `DEBUG` or start Emacs with `--debug-init`.
#+begin_src emacs-lisp :tanble yes
(eval-and-compile
  (when (getenv "DEBUG") (setq init-file-debug t))
  (setq debug-on-error (and (not noninteractive) init-file-debug)))
#+end_src

Provide a location where Emacs can store data and cache.
#+begin_src emacs-lisp :tangle yes
(eval-and-compile
  (defvar data-dir
    (if (getenv "XDG_DATA_HOME")
        (concat (getenv "XDG_DATA_HOME") "/emacs/")
      (expand-file-name "~/.local/share/emacs/"))
    "Directory for data.")

  (defvar cache-dir
    (if (getenv "XDG_CACHE_HOME")
        (concat (getenv "XDG_CACHE_HOME") "/emacs/")
      (expand-file-name "~/.cache/emacs/"))
    "Directory for cache.")

  (defvar pictures-dir
    (or (getenv "XDG_PICTURES_DIR")
        (expand-file-name "~/Pictures/"))
    "Directory for pictures."))
#+end_src

** Customization

Put custom definitions in a temporary file so it doesnâ€™t grow over time.This means all customization will
disappear upon reboot and instead needs to be managed via the initialization file.
#+begin_src emacs-lisp :tangle yes
(setq custom-file (expand-file-name "custom.el" temporary-file-directory))
#+end_src

** use-package
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (require 'use-package))

(eval-and-compile
  (defun use-package-ensure-ignore (&rest _args) t)
  (setq use-package-ensure-function #'use-package-ensure-ignore)

  (setq use-package-always-defer t)
  (setq use-package-hook-name-suffix nil))

(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))
#+end_src

*** auto-minor-mode
Enable minor modes by buffer name and contents. It provides the ~use-package~ keyword
~:minor~ and ~:magic-minor~ where you can specify these rules.
#+begin_src emacs-lisp :tangle yes
(use-package auto-minor-mode
  :ensure t
  :init
  (eval-when-compile
    (require 'auto-minor-mode)))
#+end_src

*** no-littering
Help keeping ~user-emacs-directory~ clean.
#+begin_src emacs-lisp :tangle yes
(use-package no-littering
  :ensure t
  :demand t
  :init
  (setq no-littering-etc-directory data-dir)
  (setq no-littering-var-directory cache-dir))
#+end_src

** Performance
No second pass of case-insensitive search over =auto-mode-alist=.
#+begin_src emacs-lisp :tangle yes
(setq auto-mode-case-fold nil)
#+end_src

Give up some bidirectional functionality for slightly faster re-display.
#+begin_src emacs-lisp :tangle yes
(setq bidi-inhibit-bpa t)
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)
#+end_src

Update UI less frequently
#+begin_src emacs-lisp :tangle yes
(setq idle-update-delay 1.0
      jit-lock-defer-time 0)
#+end_src

Accelerate scrolling with the trade-off of sometimes delayed accurate fontification.
#+begin_src emacs-lisp :tangle yes
(setq fast-but-imprecise-scrolling t)
#+end_src

*** gcmh
Adjust Garbage Collector threshold depending on activity and try to run garbage collection
during idle instead.
#+begin_src emacs-lisp :tangle yes
(use-package gcmh
  :ensure t
  :hook
  (after-init-hook . gcmh-mode)
  :init
  (setq gcmh-idle-delay 5)
  (setq gcmh-high-cons-threshold (* 16 1024 1024)) ; 16MB
  (setq gcmh-verbose init-file-debug))
#+end_src

*** explain-pause-mode
Track how much time is spent in each function and present a view to investigate this data.
#+begin_src emacs-lisp :tangle yes
(use-package explain-pause-mode
  :ensure t
  :commands
  (explain-pause-mode)
  :init
  (when init-file-debug
    (explain-pause-mode 1)))
#+end_src

*** so-long
Improve performance for files with long lines, for example minified code.
#+begin_src emacs-lisp :tangle yes
(use-package so-long
  :defer 2
  :config
  (global-so-long-mode 1))
#+end_src

*** vlf
Large file support. This can view/edit/search and compare large files.
#+begin_src emacs-lisp :tangle yes
(use-package vlf :ensure t)
#+end_src

** Libraries
*** all-the-icons
Library for displaying icons. I am trying to use icons where possible.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :ensure t
  :commands
  (all-the-icons-faicon all-the-icons-octicon))
#+end_src

*** cl-lib
Library providing functions inspired by Common Lisp. In many cases these functions feel
more natural to use.
#+begin_src emacs-lisp :tangle yes
(require 'cl-lib)
(require 'cl-extra)
#+end_src

** Appearance
*** Typography
**** Size
#+begin_src emacs-lisp :tangle yes
(defvar init-line-spacing 0.25
  "Spacing between lines.")

(defvar init-default-font-height 120
  "Default font height.")
#+end_src

**** Face
#+begin_src emacs-lisp :tangle yes
  (defvar init-fixed-pitch-font "Iosevka Slab"
    "Font used for fixed-pitch faces.")

  (defvar init-variable-pitch-font "Noto Sans"
    "Font used for variable-pitch faces.")

  (defvar init-serif-font "Noto Serif"
    "Font used for serif faces.")

  (defvar init-unicode-font "Noto Sans Mono"
    "Fallback font used for unicode glyphs.")

  (defvar init-symbol-fonts '("Noto Emoji" "Symbola")
    "Fonts used for symbol/emoji faces.")
#+end_src

Setup symbol fonts.
#+begin_src emacs-lisp :tangle yes
  (dolist (font init-symbol-fonts)
    (set-fontset-font t 'symbol font nil 'append))
#+end_src

**** Theme
***** Doom themes
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-tokyo-night t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom treemacs theme
    (setq doom-themes-treemacs-theme "doom-tokyo-night")
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** Meow modal
#+begin_src emacs-lisp :tanble yes
  (use-package meow
    :ensure t
    :init
    (meow-global-mode 1)
    :config
    (set-face-background 'meow-search-highlight "#446688")
    (set-face-background 'meow-beacon-fake-selection "#446688")
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (setq meow-keypad-leader-dispatch "C-c")
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
   '("k" . meow-prev)
   '("P" . meow-page-up)
   '("N" . meow-page-down)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("1" . meow-expand-1)
   '("2" . meow-expand-2)
   '("3" . meow-expand-3)
   '("4" . meow-expand-4)
   '("5" . meow-expand-5)
   '("6" . meow-expand-6)
   '("7" . meow-expand-7)
   '("8" . meow-expand-8)
   '("9" . meow-expand-9)
   '("-" . negtive-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("P" . meow-page-up)
   '("N" . meow-page-down)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
#+end_src
